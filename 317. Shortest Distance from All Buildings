class Solution {
public:
    int shortestDistance(vector<vector<int>>& grid)
    {
        int m = grid.size();
        if(m == 0)
            return -1;
        int n = grid[0].size();
        if(n == 0)
            return -1;
        vector<vector<int>> sum = grid;
        vector<vector<int>> dire{{0, -1}, {0, 1}, {1, 0}, {-1, 0}};
        int res = INT_MAX;
        int val = 0;
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(grid[i][j] == 1)
                {
                    res = INT_MAX;
                    vector<vector<int>> dist(m, vector<int>(n, 0));
                    //vector<vector<int>> dist = grid;
                    queue<pair<int, int>> q;
                    q.push({i, j});
                    while(!q.empty())
                    {
                        int a = q.front().first;
                        int b = q.front().second;
                        q.pop();
                        for(int k = 0; k < dire.size(); k++)
                        {
                            int x = a + dire[k][0];
                            int y = b + dire[k][1];
                            if(x < 0 || x >= m || y < 0 || y >= n)
                            {
                                continue;
                            }
                            if(grid[x][y] == val)
                            {
                                grid[x][y]--;
                                dist[x][y] = dist[a][b] + 1;
                                sum[x][y] += dist[x][y];
                                q.push({x, y});
                                res = min(res, sum[x][y]);
                            }
                        }
                    }
                    val--;
                }
            }
        }
        return res==INT_MAX?-1:res;
    }
};
