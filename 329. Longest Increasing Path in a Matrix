class Solution {
public:
    vector<vector<int>> dirs {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
    int _m;
    int _n;
    int longestIncreasingPath(vector<vector<int>>& matrix)
    {
        int m = matrix.size();
        if(m == 0)
            return 0;
        int n = matrix[0].size();
        if(n == 0)
            return 0;
        _m = m;
        _n = n;
        vector<vector<int>> dp(m, vector<int>(n, 0));
        int res = 0;
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                res = max(res, dfs(matrix, dp, i, j, INT_MIN));
            }
        }
        return res;
    }
    
    int dfs(vector<vector<int>>& matrix, vector<vector<int>>& dp, int x, int y, int val)
    {
        if(x < 0 || x >= _m || y < 0 || y >= _n || matrix[x][y] <= val)
            return 0;
        if(dp[x][y])
            return dp[x][y];
        int a = dfs(matrix, dp, x-1, y, matrix[x][y]);
        int b = dfs(matrix, dp, x+1, y, matrix[x][y]);
        int c = dfs(matrix, dp, x, y-1, matrix[x][y]);
        int d = dfs(matrix, dp, x, y+1, matrix[x][y]);
        dp[x][y] = 1+ max(a, max(b, max(c, d)));
        return dp[x][y];
    }
};
