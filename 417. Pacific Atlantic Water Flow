class Solution {
public:
    vector<pair<int, int>> pacificAtlantic(vector<vector<int>>& matrix) 
    {
        vector<pair<int, int>> res;
        int m = matrix.size();
        if(m == 0)
            return res;
        int n = matrix[0].size();
        if(n == 0)
            return res;
        vector<vector<int>> dirs{{0,-1},{-1,0},{0,1},{1,0}};
        vector<vector<bool>> pacific(m, vector<bool>(n, false));
        vector<vector<bool>> atlantic(m, vector<bool>(n, false));
        queue<pair<int, int>> pac;
        queue<pair<int, int>> atl;
        vector<vector<bool>> pac_visited(m, vector<bool>(n, false));
        vector<vector<bool>> atl_visited(m, vector<bool>(n, false));
        for(int j = 0; j < n; j++)
        {
            pacific[0][j] = true;
            pac.push(make_pair(0, j));
            pac_visited[0][j] = true;
            atlantic[m-1][j] = true;
            atl.push(make_pair(m-1, j));
            atl_visited[m-1][j] = true;
        }
        for(int i = 0; i < m; i++)
        {
            pacific[i][0] = true;
            pac.push(make_pair(i, 0));
            pac_visited[i][0] = true;
            atlantic[i][n-1] = true;
            atl.push(make_pair(i, n-1));
            atl_visited[i][n-1] = true;
        }
        while(!pac.empty())
        {
            pair<int, int> now = pac.front();
            pac.pop();
            for(auto dir:dirs)
            {
                int x = now.first + dir[0];
                int y = now.second + dir[1];
                if(x < 0 || x >= m || y < 0 || y >= n || pac_visited[x][y] || matrix[x][y] < matrix[now.first][now.second])
                    continue;
                pac_visited[x][y] = true;
                pac.push(make_pair(x,y));
            }
        }
        
        while(!atl.empty())
        {
            pair<int, int> now = atl.front();
            atl.pop();
            for(auto dir:dirs)
            {
                int x = now.first + dir[0];
                int y = now.second + dir[1];
                if(x < 0 || x >= m || y < 0 || y >= n || atl_visited[x][y] || matrix[x][y] < matrix[now.first][now.second])
                    continue;
                atl_visited[x][y] = true;
                atl.push(make_pair(x,y));
            }
        }
        
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(atl_visited[i][j] && pac_visited[i][j])
                    res.push_back(make_pair(i,j));
            }
        }
        return res;
    }
};
