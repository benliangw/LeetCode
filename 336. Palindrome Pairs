class Solution {
public:
    struct TrieNode{
        vector<TrieNode*> next;
        int index;
        vector<int> list;
        
        TrieNode()
        {
            next.resize(26, nullptr);
            index = -1;
        }
    };
    
    bool isPalindrome(string word, int i, int j)
    {
        while(i < j)
        {
            if(word[i] != word[j])
                return false;
            i++;
            j--;
        }
        return true;
    }
    
    void addWord(TrieNode* root, string word, int index)
    {
        for(int i = word.length() - 1; i >= 0; i--)
        {
            int j = word[i] - 'a';
            if(!root->next[j])
                root->next[j] = new TrieNode();
            if(isPalindrome(word, 0, i))
                root->list.push_back(index);
            root = root->next[j];
        }
        root->list.push_back(index);
        root->index = index;
    }
    
    void search(vector<string>& words, int i, TrieNode* root, vector<vector<int>>& res)
    {
        for(int j = 0; j < words[i].length(); j++)
        {
            if(root->index >= 0 && root->index != i && isPalindrome(words[i], j, words[i].length() - 1))
            {
                vector<int> tmp;
                tmp.push_back(i);
                tmp.push_back(root->index);
                res.push_back(tmp);
            }
            root = root->next[words[i][j] - 'a'];
            if(!root)
                return;
        }
        for(auto j : root->list)
        {
            if(i == j)
                continue;
            vector<int> tmp;
            tmp.push_back(i);
            tmp.push_back(j);
            res.push_back(tmp);
        }
    }

    vector<vector<int>> palindromePairs(vector<string>& words) {
        vector<vector<int>> res;
        TrieNode* root = new TrieNode();
        for(int i = 0; i < words.size(); i++)
        {
            addWord(root, words[i], i);
        }
        for(int i = 0; i < words.size(); i++)
        {
            search(words, i, root, res);
        }
        return res;
    }
};
