class Solution {
public:
    int numberOfPatterns(int m, int n) 
    {
        int res = 0;
        vector<bool> isvisited(10, false);
        vector<vector<int>> jump(10, vector<int>(10, 0));
        jump[1][3] = jump[3][1] = 2;
        jump[1][7] = jump[7][1] = 4;
        jump[1][9] = jump[9][1] = 5;
        jump[7][9] = jump[9][7] = 8;
        jump[3][9] = jump[9][3] = 6;
        jump[3][7] = jump[7][3] = 5;
        jump[4][6] = jump[6][4] = 5;
        jump[2][8] = jump[8][2] = 5;
        res += helper(1, 1, 0, m, n, jump, isvisited) * 4;
        res += helper(2, 1, 0, m, n, jump, isvisited) * 4;
        res += helper(5, 1, 0, m, n, jump, isvisited);
        return res;
    }
    
    int helper(int num, int len, int res, int m, int n, vector<vector<int>>& jump, vector<bool>& isvisited)
    {
        if(len >= m)
            ++res;
        len++;
        if(len > n)
            return res;
        
        isvisited[num] = true;
        for(int next = 1; next <= 9; ++next)
        {
            int jumpnum = jump[num][next];
            if(!isvisited[next] && (jumpnum == 0 || isvisited[jumpnum] == true))
            {
                res = helper(next, len, res, m, n, jump, isvisited);
            }
        }
        isvisited[num] = false;
        return res;
    }
};
