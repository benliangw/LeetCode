class Solution {
public:
    bool areSentencesSimilarTwo(vector<string>& words1, vector<string>& words2, vector<pair<string, string>> pairs) 
    {
        if(words1.size() != words2.size())
            return false;
        for(int i = 0; i < pairs.size(); i++)
        {
            string first = pairs[i].first;
            string second = pairs[i].second;
            connect(first, second);
            //m[getroot(first)] = getroot(second);
        }
        for(int i = 0; i < words1.size(); i++)
        {
            if(words1[i] == words2[i] || getroot(words1[i]) == getroot(words2[i]))
            {
                continue;
            }
            else
                return false;
        }
        return true;
    }
    
    string getroot(string s)
    {
        string t = "";

        while(m.find(s) != m.end())
        {
	        t = m[s];
	        if(m.find(t) != m.end())
	        {
	        	m[s] = m[t];
	        }
	        s = t;
        }
        return s;
    }
    
    void connect(string a, string b)
    {
        string a_root = getroot(a);
        string b_root = getroot(b);
        if(a_root == b_root)
            return;
        if(freq.find(a_root) == freq.end())
            freq[a_root] = 1;
        if(freq.find(b_root) == freq.end())
            freq[b_root] = 1;
        
        if(freq[a_root] <= freq[b_root])
        {
            m[a_root] = b_root;
            freq[b_root] += freq[a_root];
        }
        else
        {
            m[b_root] = a_root;
            freq[a_root] += freq[b_root];
        }
    }
    
private:
    unordered_map<string, string> m; // first:child, second:root
    unordered_map<string, int> freq;
};
