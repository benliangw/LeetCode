class Solution {
public:
    vector<int> numIslands2(int m, int n, vector<pair<int, int>>& positions)
    {
        vector<int> res;
        if(m <= 0 || n <= 0)
            return res;
        n_all = n;
        m_all = m;
        vector<int> root(m*n, -1);
        int count = 0;
        
        for(int i = 0; i < positions.size(); i++)
        {
            setRoot(positions[i].first, positions[i].second, root);
            connect(positions[i].first, positions[i].second, root, 0, 1);
            connect(positions[i].first, positions[i].second, root, 0, -1);
            connect(positions[i].first, positions[i].second, root, 1, 0);
            connect(positions[i].first, positions[i].second, root, -1, 0);
            res.push_back(total);
        }
        return res;
    }
    
    int getRoot(int first, int second, vector<int>& root)
    {
        int id;
        while(root[first*n_all+second] != (first*n_all+second))
        {
            id = root[first*n_all+second];
            first = id / n_all;
            second = id % n_all;
        }
        return root[first*n_all+second];
    }
    
    void setRoot(int first, int second, vector<int>& root)
    {
        total++;
        root[first*n_all+second] = first*n_all+second;
    }
    
    void connect(int first_init, int second_init, vector<int>& root, int a, int b)
    {
        int first = first_init + a;
        int second = second_init + b;
        if(first >= m_all || first < 0)
            return;
        if(second >= n_all || second < 0)
            return;
        if(root[first*n_all+second] == -1)
            return;
        int id = getRoot(first, second, root);
        int id_init = getRoot(first_init, second_init, root);
        if(id != id_init)
        {
            total--;
            root[id_init] = id;
        }
    }
    
private:
    int total = 0;
    int n_all, m_all;
};
