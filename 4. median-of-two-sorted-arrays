class Solution 
{
public:
	double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2)
    {
		int size_a = nums1.size();
		int size_b = nums2.size();
        if(size_a == 0)
        {
            return (nums2[size_b/2] + nums2[(size_b-1)/2]) / 2.0;
        }
        if(size_b == 0)
        {
            return (nums1[size_a/2] + nums1[(size_a-1)/2]) / 2.0;
        }
        if(size_a > size_b)
            return findMedianSortedArrays(nums2, nums1);
        int l1, l2, r1, r2, c1, c2, left = 0, right = size_a * 2;
        while(left <= right)
        {
            c1 = (left + right) / 2;
            c2 = size_a + size_b - c1;
            l1 = (c1 == 0)?INT_MIN:nums1[(c1-1)/2];
            r1 = (c1 == 2*size_a)?INT_MAX:nums1[c1/2];
            l2 = (c2 == 0)?INT_MIN:nums2[(c2-1)/2];
            r2 = (c2 == 2*size_b)?INT_MAX:nums2[c2/2];
            if(l1 > r2)
                right = c1 - 1;
            else if (l2 > r1)
                left = c1 + 1;
            else
                break;
        }
        return (max(l1, l2) + min(r1, r2)) / 2.0;
	}
};
