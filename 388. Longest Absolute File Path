class Solution {
public:
    int lengthLongestPath(string input) 
    {
        int res = 0, n = input.size(), level = 0;
        int* m = new int[n];
        m[0] = 0;
        for(int i = 0; i < n; ++i)
        {
            int start = i;
            while(i < n && input[i] != '\n' && input[i] != '\t')
            {
                i++;
            }
            if(i >= n || input[i] == '\n')
            {
                string t = input.substr(start, i - start);
                if(t.find('.') != string::npos)
                {
                    res = max(res, m[level] + (int)t.length());
                }
                else
                {
                    ++level;
                    m[level] = m[level - 1] + (int)t.length() + 1;
                }
                level = 0;
            }
            else
            {
                ++level;
            }
        }
        delete[] m;
        return res;
    }
};
