/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * class NestedInteger {
 *   public:
 *     // Return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool isInteger() const;
 *
 *     // Return the single integer that this NestedInteger holds, if it holds a single integer
 *     // The result is undefined if this NestedInteger holds a nested list
 *     int getInteger() const;
 *
 *     // Return the nested list that this NestedInteger holds, if it holds a nested list
 *     // The result is undefined if this NestedInteger holds a single integer
 *     const vector<NestedInteger> &getList() const;
 * };
 */
class NestedIterator {
private:
    stack<int> mine;
public:
    NestedIterator(vector<NestedInteger> &nestedList) 
    {
        for(int i = nestedList.size() - 1; i >= 0; i--)
        {
            stack<NestedInteger> tmp;
            NestedInteger cur = nestedList[i];
            if(cur.isInteger())
                mine.push(cur.getInteger());
            else
            {
                for(int j = 0; j < cur.getList().size(); j++)
                {
                    tmp.push(cur.getList()[j]);
                }
            }
            while(!tmp.empty())
            {
                NestedInteger now = tmp.top();
                tmp.pop();
                if(now.isInteger())
                {
                    mine.push(now.getInteger());
                }
                else
                {
                    for(int j = 0; j < now.getList().size(); j++)
                    {
                        tmp.push(now.getList()[j]);
                    }
                }
            }
        }
    }

    int next() 
    {
        int t = mine.top();
        mine.pop();
        return t;
    }

    bool hasNext() 
    {
        if(!mine.empty())
            return true;
        return false;
    }
};

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */
